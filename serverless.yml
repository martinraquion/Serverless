# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverex
# app and org for use with dashboard.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}
  usagePlan:
    throttle:
      rateLimit: 100
      burstLimit: 200
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "ses:*"
      Resource: "arn:aws:ses:us-east-1:*:*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  #  include:
  #    - include-me.js
  #    - include-me-dir/**
  #exclude:
  #  - config.*.json
#    - exclude-me-dir/**

functions:
  sendEmail:
    handler: handler.sendEmail
    description: Used to send an email when the contact form is filled out on dev.partners.inc
    events:
      - http:
          path: email/contact
          method: post
          cors:
            origins: ${file(./config.${self:provider.stage}.json):ALLOWED_ORIGINS}
    environment:
      SENDER: ${file(./config.${self:provider.stage}.json):SENDER}
      RECEIVERS: ${file(./config.${self:provider.stage}.json):RECEIVERS}
      EMAIL_TEMPLATE: ${self:resources.Resources.ContactEmailTemplate.Properties.Template.TemplateName}
    memorySize: 128
    timeout: 3
resources:
  Resources:
    ContactEmailTemplate:
      Type: AWS::SES::Template
      Properties:
        Template:
          TemplateName: !Join
            - "-"
            - - "DevPartnersInc-ContactTemplate"
              - ${self:provider.stage}
          SubjectPart: "Dev Partners Inc - Someone want to get started"
          HtmlPart: ${file(./template.html)}
          TextPart: "Name: {{firstname}} {{lastname}}/r/nPhone Number: {{phone_number}}/r/nEmail: {{email}}/r/nCompany: {{company}} /r/nHow did they find us: {{how}}/r/nWhat they need: {{need}}/r/n"
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
